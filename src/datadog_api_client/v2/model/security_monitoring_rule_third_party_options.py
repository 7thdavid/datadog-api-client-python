# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/).
# Copyright 2019-Present Datadog, Inc.


from datadog_api_client.v2.model_utils import (
    ModelNormal,
    cached_property,
)


def lazy_import():
    from datadog_api_client.v2.model.security_monitoring_rule_severity import SecurityMonitoringRuleSeverity

    globals()["SecurityMonitoringRuleSeverity"] = SecurityMonitoringRuleSeverity


class SecurityMonitoringRuleThirdPartyOptions(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    validations = {}

    @cached_property
    def openapi_types():
        lazy_import()
        return {
            "default_notifications": ([str],),
            "default_status": (SecurityMonitoringRuleSeverity,),
            "first_seen_override": (str,),
            "last_seen_override": (str,),
            "root_query": (str,),
            "signal_id": (str,),
        }

    attribute_map = {
        "default_notifications": "defaultNotifications",
        "default_status": "defaultStatus",
        "first_seen_override": "firstSeenOverride",
        "last_seen_override": "lastSeenOverride",
        "root_query": "rootQuery",
        "signal_id": "signalId",
    }

    read_only_vars = {}

    def __init__(self, *args, **kwargs):
        """SecurityMonitoringRuleThirdPartyOptions - a model defined in OpenAPI

        Keyword Args:
            default_notifications ([str]): [optional] Notification targets for the root query.
            default_status (SecurityMonitoringRuleSeverity): [optional]
            first_seen_override (str): [optional] (Optional): the name of an attribute to override the first seen value of the third party signal.
            last_seen_override (str): [optional] (Optional): the name of an attribute to override the last seen value of the third party signal.
            root_query (str): [optional] Root query of the rule.
            signal_id (str): [optional] Optional mapping of the third-party signal ID.
        """
        super().__init__(kwargs)

        self._check_pos_args(args)

    @classmethod
    def _from_openapi_data(cls, *args, **kwargs):
        """Helper creating a new instance from a response."""

        self = super(SecurityMonitoringRuleThirdPartyOptions, cls)._from_openapi_data(kwargs)

        self._check_pos_args(args)

        return self
